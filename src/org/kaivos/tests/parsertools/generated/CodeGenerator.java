// AUTO GENERATED SAMPLE CODE GENERATOR CLASS
// GENERATED BY ParserGenerator1
//
// GENERATOR VERSION: a0.1
// (C) 2013 Iikka Hauhio - ALL RIGHTS RESERVED
// THIS GENERATOR IS ONLY A PROTOTYPE
//
// GRAMMAR FILE: tests/real.language

package org.kaivos.tests.parsertools.generated;
// TODO Implement your own code generator
public class CodeGenerator {
	public static String generate_Member(Parser.Rule_Member rule) {
		if (rule == null) return "";
		String a = "";
		if (rule.key != null) a += "key = " + generate_Expression(rule.key) + ",";
		if (rule.op != null) a += ("op = " + rule.op + ",");
		if (rule.member != null) a += ("member = " + rule.member + ",");
		return "{" + a + "}";
	}

	public static String generate_Arguments(Parser.Rule_Arguments rule) {
		if (rule == null) return "";
		String a = "";
		if (rule.args != null) { a += "args = ["; for (Parser.Rule_Expression s : rule.args) a += generate_Expression(s) + ","; a+="]"; }
		return "{" + a + "}";
	}

	public static String generate_Start(Parser.Rule_Start rule) {
		if (rule == null) return "";
		String a = "";
		if (rule.stm != null) { a += "stm = ["; for (Parser.Rule_Statement s : rule.stm) a += generate_Statement(s) + ","; a+="]"; }
		return "{" + a + "}";
	}

	public static String generate_MemberAccess(Parser.Rule_MemberAccess rule) {
		if (rule == null) return "";
		String a = "";
		if (rule.a != null) a += "a = " + generate_FunctionCall(rule.a) + ",";
		if (rule.op != null) a += ("op = " + rule.op + ",");
		if (rule.b != null) { a += "b = ["; for (Parser.Rule_Member s : rule.b) a += generate_Member(s) + ","; a+="]"; }
		if (rule.value != null) a += "value = " + generate_Expression(rule.value) + ",";
		return "{" + a + "}";
	}

	public static String generate_Prim(Parser.Rule_Prim rule) {
		if (rule == null) return "";
		String a = "";
		if (rule.expr != null) a += "expr = " + generate_Expression(rule.expr) + ",";
		if (rule.op != null) a += ("op = " + rule.op + ",");
		if (rule.lval != null) a += "lval = " + generate_LValue(rule.lval) + ",";
		if (rule.params != null) { a += "params = ["; for (Object s : rule.params) a += (s + ","); a+="]"; }
		if (rule.stm != null) a += "stm = " + generate_Statement(rule.stm) + ",";
		a += ("number = " + rule.number + ",");
		if (rule.values != null) { a += "values = ["; for (Parser.Rule_Expression s : rule.values) a += generate_Expression(s) + ","; a+="]"; }
		return "{" + a + "}";
	}

	public static String generate_LValue(Parser.Rule_LValue rule) {
		if (rule == null) return "";
		String a = "";
		if (rule.variable != null) a += ("variable = " + rule.variable + ",");
		return "{" + a + "}";
	}

	public static String generate_Statement(Parser.Rule_Statement rule) {
		if (rule == null) return "";
		String a = "";
		if (rule.elseif != null) { a += "elseif = ["; for (Parser.Rule_StmList s : rule.elseif) a += generate_StmList(s) + ","; a+="]"; }
		if (rule.expr != null) a += "expr = " + generate_Expression(rule.expr) + ",";
		if (rule.elseBlock != null) { a += "elseBlock = ["; for (Parser.Rule_Statement s : rule.elseBlock) a += generate_Statement(s) + ","; a+="]"; }
		if (rule.cmd != null) a += ("cmd = " + rule.cmd + ",");
		if (rule.block != null) { a += "block = ["; for (Parser.Rule_Statement s : rule.block) a += generate_Statement(s) + ","; a+="]"; }
		if (rule.cond != null) a += "cond = " + generate_Expression(rule.cond) + ",";
		if (rule.rv != null) a += "rv = " + generate_Expression(rule.rv) + ",";
		if (rule.elsecond != null) { a += "elsecond = ["; for (Parser.Rule_Expression s : rule.elsecond) a += generate_Expression(s) + ","; a+="]"; }
		return "{" + a + "}";
	}

	public static String generate_Expression(Parser.Rule_Expression rule) {
		if (rule == null) return "";
		String a = "";
		if (rule.a != null) a += "a = " + generate_Term(rule.a) + ",";
		if (rule.op != null) { a += "op = ["; for (String s : rule.op) a += (s + ","); a+="]"; }
		if (rule.b != null) { a += "b = ["; for (Parser.Rule_Term s : rule.b) a += generate_Term(s) + ","; a+="]"; }
		return "{" + a + "}";
	}

	public static String generate_StmList(Parser.Rule_StmList rule) {
		if (rule == null) return "";
		String a = "";
		if (rule.block != null) { a += "block = ["; for (Parser.Rule_Statement s : rule.block) a += generate_Statement(s) + ","; a+="]"; }
		return "{" + a + "}";
	}

	public static String generate_FunctionCall(Parser.Rule_FunctionCall rule) {
		if (rule == null) return "";
		String a = "";
		if (rule.a != null) a += "a = " + generate_Prim(rule.a) + ",";
		if (rule.b != null) { a += "b = ["; for (Parser.Rule_Arguments s : rule.b) a += generate_Arguments(s) + ","; a+="]"; }
		return "{" + a + "}";
	}

	public static String generate_Term(Parser.Rule_Term rule) {
		if (rule == null) return "";
		String a = "";
		if (rule.a != null) a += "a = " + generate_MemberAccess(rule.a) + ",";
		if (rule.op != null) { a += "op = ["; for (String s : rule.op) a += (s + ","); a+="]"; }
		if (rule.b != null) { a += "b = ["; for (Parser.Rule_MemberAccess s : rule.b) a += generate_MemberAccess(s) + ","; a+="]"; }
		return "{" + a + "}";
	}


}

